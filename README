==================================================================================================
==================================================================================================
  G-CTMQC* is a free software under GNU Lesser General Public License (LGPL).
  Date:  08/03/2021

  Copyright 2021 Federica Agostini [1] with contributions of:
        Emanuele MARSILI           [1,2]
        Francesco TALOTTA          [1,3]
        Carlotta PIERONI           [1,4]
        Lea M. IBELE               [1]
        Evaristo VILLASECO ARRIBAS [1,5]
        Eduarda SANGIOGO GIL       [1,6]
        Peter SCHUERGER            [1]
=======
[1] Institut de Chimie Physique, UMR 8000, CNRS, Université Paris-Saclay, France
[2] School of Chemistry, University of Bristol, United Kingdom
[3] Institut des Sciences Moléculaires d’Orsay, CNRS, Université Paris-Saclay, France
[4] Dipartimento di Chimica e Chimica Industriale, Università di Pisa, Pisa, Italy
[5] Department of Physics, Rutgers University, Newark 07102, New Jersey USA
[6] Institut für Theoretische Chemie, Universität Wien, Austria
=======

* Originally developed during the Quantum-Dynamics E-CAM project :
     https://www.e-cam2020.eu/quantum-dynamics

==================================================================================================
__________________
SCIENTIFIC CONTEXT
__________________
Studies in the domain of photochemistry and photophysics strongly rely on simulation 
methods able to describe strong coupling between electronic and nuclear motion on the 
femtosecond time scale, usually called nonadiabatic coupling. Simulations give access 
to microscopic information in terms of molecular structures, electronic populations, 
vibrational energies that can be easily compared to experiments, for instance in the 
domains of time-resolved spectroscopy or 2D spectroscopy. In addition to this, molecular 
dynamics simulations allow to follow in real time the evolution of molecular systems, 
thus providing support to interpret and even predict the outcome of experiments. 

Photochemical and photophysical reactions are ubiquitous in nature, from photosynthesis 
to vision, and are more and more exploited for technological advances, as for the 
photo-current production in organic photovoltaic devices. In addition, it is becoming 
clear the importance to consider spin-orbit coupling even in those systems composed of 
light elements, such as oxygen and carbon, to be able to describe processes such as 
intersystem crossings in organic light-emitting diodes.

G-CTMQC module provides numerical tools to perform simulations of internal conversion 
(spin-allowed) and intersystem crossing (spin-forbidden) phenomena underlying 
photochemical and photophysical reactions. G-CTMQC gives the user the flexibility of 
employing different approaches and, thus, various approximation schemes, to achieve 
dynamical information as accurate as possible, as well as ample flexibility in the 
choice of systems that be studied thanks to the interface of G-CTMQC with 
QuantumModelLib (https://github.com/lauvergn/QuantumModelLib).

______________________
THEORETICAL BACKGROUND
______________________
G-CTMQC is a module for excited-state molecular dynamics simulations with various 
trajectory-based algorithms, including nonadiabatic coupling and spin-orbit coupling.

Nuclear dynamics can be performed based on the quantum-classical algorithm derived from 
the exact factorization of the electron-nuclear wavefunction [Phys. Rev Lett. 105, 
123002 (2010)], dubbed CT-MQC [Phys. Rev Lett. 115, 073001 (2015)]. Recently, the 
extension of the exact factorization theory has been proposed to include spin-orbit 
coupling [Phys. Rev Lett. 124, 033001 (2020)]. Therefore, the “generalized” algorithm 
is now able to treat (i) standard nonadiabatic situations, where spin-allowed electronic 
transitions among states with the same spin multiplicity are mediated by the coupling 
to nuclear motion, and (ii) spin-orbit interactions, where spin-forbidden electronic 
transitions among states of different spin multiplicity are induced by the spin-orbit 
coupling. 

Electronic evolution is carried out in the adiabatic basis for standard nonadiabatic 
problems. In the case of spin-orbit interactions, G-CTMQC offers the options to 
use the spin-diabatic or the spin-adiabatic representations. Information about electronic-structure 
properties, ie, energies, gradients and couplings, is calculated and read 
on-the-fly at the positions of the trajectories at each time step based on the 
QuantumModelLib library of potentials (https://github.com/lauvergn/QuantumModelLib).


In addition, the code offers the possibility of performing calculations with the 
trajectory surface hopping algorithm [J. Chem. Phys. 93, 1061 (1990)] and the Ehrenfest 
approach [Faraday Discuss. 110, 407 (1998)]. Concerning the trajectory surface hopping 
method, the fewest switches scheme is implemented, along with the energy decoherence 
corrections to fix the overcoherence issue of surface hopping [J. Chem. Phys. 126, 134114 
(2007)]. For surface hopping and Ehrenfest, only nonadiabatic couplings are currently 
implemented.

Generalized CTMQC, G-CTMQC, includes:
*  spin-allowed, between electronic states of the same spin multiplicity, and spin-forbidden, between 
electronic states of different spin multiplicity, transitions can be simulated; the former are mediated 
by the kinetic, also  called nonadiabatic, coupling between electronic and nuclear motion, whereas the 
latter are induced by spin-orbit coupling;
*  G-CT-MQC calculations, based on the generalized coupled-trajectory mixed quantum-classical algorithm, 
can be performed in the spin-diabatic and spin-adiabatic basis for the electronic subsystem;
*  nonadiabatic calculations based on trajectory surface hopping and on the Ehrenfest approach can be 
carried out, including energy decoherence corrections in surface hopping; the fewest switches scheme is 
used for surface hopping;
*  nonadiabatic calculations based on the combination of trajectory surface hopping with the coupled-trajectory
idea of CT-MQC;
*  on-the-fly dynamics can be performed based on the calculation of electronic structure information, namely 
energies, gradients and couplings, along the trajectories via the interface to the QuantumModelLib library;
* additional model potentials can be included apart from the library QuantumModelLib, and an example is 
provided with the one-dimensional two-electronic-state NaI potential [J. Chem. Phys. 64, 2953 (1976)].

Studies based on G-CTMQC are documented in
*  [J. Chem. Theory Comput. 16, 6032 (2020)]: tests on the cis-trans isomerization of PSB3 with CT-MQC, 
surface hopping and Ehrenfest using a 3D model [J. Phys. Chem. A 123, 1710 (2019)];
*  [J. Chem. Theory Comput. 16, 4833 (2020)]: tests concerning the inclusion of spin-orbit coupling in the 
exact factorization
*  [J. Chem. Phys. 154,  034104 (2021)]: studies on different approaches to sample the initial conditions 
on a 2D model [J. Phys. Chem. B 104 1146 (2000)] for the cis-trans isomerization of retinals.
*  [J. Chem. Theory Comput. 17, 5969 (2021)]: combination of CT-MQC with surface hopping.

==================================================================================================
_____________________
BUILDINIG AND TESTING
_____________________

G-CTMQC is a fortran90 based code. Compilation of the code requires the gfortran compiler, and Lapack libraries. 
Tests have been performed with GCC 10.2.x. Note that, before compiling G-CTMQC it is necessary to compile the 
potential library available https://github.com/lauvergn/QuantumModelLib and copy the file libpot.a into the src 
directory of G-CTMQC.

Once the main directory G-CTMQC has been downloaded, go to the directory and

        cd src 
        make

Running the command make will compile the source code and generate the executable main.x.

From the main directory g-ctmqc, go into the directory 

        tests 

where you will find some one-dimensional and 
two-dimensional tests: photo-dissociation of NaI in 1D in 1D_TEST, a double-well model in 1D from [J. Chem. Theory Comput. 17, 
5969 (2021)] in DOUBLE_WELL_PUBLISHED, a conical-intersection model in 2D in 2D_TEST.

The program generates a series of output files that are saved in different directories, i.e. coeff and trajectories.
Therefore, in order not to obtain errors during the execution of the program, these directories have to be created. 
In 1D_TEST and in 2D_TEST, a script run.sh is provided to automatically launch the calculations and create the output
directories coeff and trajectories.

After successful execution of the program, the directories coeff and trajectories will contain a certain number of 
files n = N / M, with N the total number of time steps and M the number of time steps after which the output is written 
during the dynamics. In each subdirectory, the files are labelled with an index increasing with time, from 0 to n. In 
the current version of the code, up to 9999 files can be created.

Description of the output: 

        coeff

Each file (named coeff.xxxx.dat) in this directory contains the coefficients of the expansion of the electronic wavefunction 
in the used electronic basis as a function of the position of the corresponding trajectory. Each file is in the form:
*  the first N_dof columns are the positions of the trajectories for each of the N_dof nuclear degrees of freedom; 
*  the following N_st x N_st columns  are the real parts of the electronic density matrix elements, with N_st the number of 
electronic states considered;
* the following N_st x N_st columns are the imaginary parts of the electronic density matrix elements.

        trajectories

In surface-hopping-based calculations, each file (named RPE.xxxx.dat) in this directory contains the values of the phase-space variables and the value of the potential energy surface(s), namely:
*  the first N_dof columns are the positions of the trajectories for each of the N_dof nuclear degrees of freedom; 
*  the following N_dof columns are the momenta of the trajectories for each of the N_dof nuclear degrees of freedom; 
*  the following column is the potential energy along the active state at the position of the trajectory;
*  the following N_st columns are the N_st adiabatic potential energies at the position of the trajectory;
*  the following column is the gauge-invariant part of the time-dependent potential energy surface;

In Ehrenfest and CT-MQC calculations, each file (named RPE.xxxx.dat) in this directory contains the values of the phase-space variables and the value of the potential energy surface(s), namely:
*  the first N_dof columns are the positions of the trajectories for each of the N_dof nuclear degrees of freedom; 
*  the following N_dof columns are the momenta of the trajectories for each of the N_dof nuclear degrees of freedom; 
*  the following column is the gauge-invariant part of the time-dependent potential energy surface;
*  the following N_st columns are the N_st adiabatic potential energies at the position of the trajectory.
Each file (named occ_state.xxxx.dat) contains the list of force/active state along each trajectory.

Additionally, the files BO_population.dat and BO_coherences.dat are created, containing the population of the adiabatic 
states and the indicator of coherence as functions of time (the first columns is the time in atomic units) and files CT_energy.dat and STC.dat contatining the trajectory-averaged total energy of the ensemble and the spurious transfer conditon. In surface-hopping-based calculations, the columns from 2 to N_st+1 of the file BO_population.dat contain the quantum electronic populations, while the following N_st columns contain the classical electronic populations. In CT-MQC and in Ehrenfest calculations, the last N_st
columns only contain zeros.


The format of the input file is the following: 

&SYSTEM
  TYP_CAL                = "XXXXX"    !*character* XXXXX = CTMQC (CT-MQC calculations), 
                                                           EHREN (Ehrenfest calculations), 
                                                           TSHFS (Fewest-switches surface hopping calculations)
  SPIN_DIA               = X          !*logical* X = T only for calculations with spin-orbit coupling 
                                                 in the spin-diabatic basis, otherwise X = F
  NRG_CHECK              = X          !*logical* X = T to switch off the spin-orbit coupling when the
                                                 energy between states is larger than NRG_GAP
  NRG_GAP                = X          !*real* only for calculations with spin-orbit coupling in the 
                                              spin-diabatic basis
  MODEL_POTENTIAL        = "XXXXX"    !*character* XXXXX = definition of the model as it appears in
                                                           QuantumModelLib
  OPTION                 = X          !*integer* X = 1, 2, 3 only for Tully's models
  NEW_POTENTIAL          = X          !*logical* X = F to use QuantumModelLib
                                                 X = T for NaI, IBr, double-well
  N_DOF                  = X          !*integer* X = number of nuclear degrees of freedom
  PERIODIC_VARIABLE      = X,X,X...   !*logical* one value for each nuclear degree of freedom 
                                                 with X = T (periodic coordinate) or F 
  PERIODICITY            = X,X,X...   !*real* one value for each nuclear degree of freedom 
                                              with X = the period in units of PI
  NSTATES                = X          !*integer* X = number of electronic states         
  TYPE_DECO              = "XX"       !*character* XX = ED for energy decoherence corrections
                                                   XX = CT for coupled-trajectory corrections 
  QMOM_FORCE             = X          !*logical* X = F to use EHREN Force
                                                 X = T to use full CTMQC Force (EHREN+XF)
  F_CORRECTION           = X          !*logical* X = F to use standard definition of acc_force
                                                 X = T to use ensemble-energy-conserving acc_force (CTMQC-E)
  R_THRESHOLD            = X          !*real*    X = threshold value for compuation of new acc_force  
                                                 expression in CTMQC-E
  C_PARAMETER            = X          !*real* energy parameter for the energy decoherence correction 
                                              in surface hopping
  JUMP_SEED              = X          !*integer* seed for random number generator for the hopping 
                                                 algorithm in SH calculation
  INITIAL_CONDITION_SEED = X      !*integer* seed for random number generator for the initial 
                                             conditions
/

&DYNAMICS
  FINAL_TIME       = X            !*real* X = length of the simulation in atomic units
  DT               = X            !*real* X = integration time step in atomic units
  NESTEPS          = X            !*integer* X = number of electronic time steps for each nuclear time step
  DUMP             = X            !*integer* X = number of time steps after which the output is 
                                                 written
  INIT_BOSTATE     = X            !*integer* X = initial electronic state
  NTRAJ            = X            !*integer* X = number of classical trajectories
  R_INIT           = X,X,X...     !*real* one value for each nuclear degree of freedom with 
                                          X = average position of the initial nuclear distribution
  K_INIT           = X,X,X...     !*real* one value for each nuclear degree of freedom with 
                                          X = average momentum of the initial nuclear distribution
  SIGMAR_INIT      = X,X,X...     !*real* one value for each nuclear degree of freedom with 
                                          X = variance in position space of the initial nuclear 
                                          distribution
  SIGMAP_INIT      = X,X,X...     !*real* one value for each nuclear degree of freedom with 
                                          X = variance in momentum space of the initial nuclear
                                          distribution
  MASS_INPUT       = X,X,X...     !*real* one value for each nuclear degree of freedom with 
                                          X = the nuclear mass
/

&EXTERNAL_FILES
  POSITIONS_FILE     = "XXXXX"    !*character* XXXXX = file containing the list of initial 
                                                       positions for the trajectories; 
                                                       if the field is empty, positions are 
                                                       sampled according to R_INIT and SIGMAR_INIT
  MOMENTA_FILE       = "XXXXX"    !*character* XXXXX = file containing the list of initial 
                                                       momenta for the trajectories; 
                                                       if the field is empty, momenta are 
                                                       sampled according to K_INIT and SIGMAP_INIT
  OUTPUT_FOLDER      = "XXXXX"    !*character* XXXXX = path to the location where the output is 
                                                       written
/

